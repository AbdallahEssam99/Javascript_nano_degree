version: 2.1
orbs:
  node: circleci/node@5.0.1
  aws-cli: circleci/aws-cli@1.3.1
  aws-elastic-beanstalk: circleci/aws-elastic-beanstalk@2.0.1
jobs:
  build-and-deploy:
    docker:
      - image: circleci/node:16
    steps:
      - node/install
      - checkout
      - aws-cli/setup

# Installing the frontend dependencies
      - run:
          name: Front-End Install
          command: |
            npm run frontend:install
            npm install webpack@latest --save-dev

# Building the frontend
      - run:
          name: Front-End Build
          command: |
            NODE_OPTIONS=--openssl-legacy-provider npm run frontend:build

# Deploying the frontend to AWS S3
      - run:
          name: Front-End Deploy
          command: |
            NODE_OPTIONS=--openssl-legacy-provider npm run frontend:deploy

# Installing the Backend dependencies
      - run:
          name: Back-End Install
          command: |
            npm run api:install

# Changing the main entry point in package.json for the Backend
      # - run:
      #     name: Back-End Change Main Entry Point
      #     command: |
      #       npm run backend:change-main
# Building the backend
      - run:
          name: Back-End Build
          command: |
            npm run api:build

# Installing AWS Elastic Beanstalk CLI
      - run:
          name: Installing AWS Elasticbeanstalk
          command: |
            npm run backend:aws-eb
      - run:
          name: Initialize Elastic Beanstalk
          command: |
            eb init -p node.js udagram_api \
              --region us-east-1 \
              --platform node.js
              
            # Set the default environment
            eb use Udagramapi-env-1
      - run:
          name: Log all environment variables
          command: |
            printenv
      - run:
          name: Set application-specific environment variables in Elastic Beanstalk
          command: |
            # Define a pattern for allowed variables, adjusting as needed for your app's variables
            ALLOWED_VARS=("POSTGRES_HOST" "POSTGRES_PORT" "POSTGRES_USERNAME" "POSTGRES_PASSWORD" "AWS_ACCESS_KEY_ID" "AWS_SECRET_ACCESS_KEY" "AWS_REGION" "JWT_SECRET")

            # Initialize valid variables string
            VALID_VARS=""

            # Loop through allowed environment variables
            for VAR in "${ALLOWED_VARS[@]}"; do
              VALUE=$(printenv "$VAR")

              # Validate that each variable is not empty or masked
              if [[ -n "$VALUE" && "$VALUE" != "********" ]]; then
                VALID_VARS+="$VAR=$VALUE "
              else
                echo "Skipping invalid or empty variable: $VAR"
              fi
            done

            # Ensure we have valid variables to set
            if [[ -z "$VALID_VARS" ]]; then
              echo "No valid environment variables to set. Exiting."
              exit 1
            else
              echo "Setting valid environment variables in Elastic Beanstalk: $VALID_VARS"
              
              # Set each environment variable individually to catch syntax issues
              for ENV_VAR in $VALID_VARS; do
                echo "Setting: $ENV_VAR"
                eb setenv "$ENV_VAR" || { echo "Error setting $ENV_VAR"; exit 1; }
              done
            fi

# Deploying the backend to AWS Elastic Beanstalk
      - run:
          name: Back-End Deploy
          command: |
            npm run api:deploy
workflows:
  build-and-deploy:
    jobs:
      - build-and-deploy:
          context: aws
          filters:
            branches:
              only:
                - deploy